// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Student.Models;

#nullable disable

namespace Student.Migrations
{
    [DbContext(typeof(stdDBContext))]
    [Migration("20230224195945_Migration0")]
    partial class Migration0
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Student.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("SubjectIdFk")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID_FK");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SubjectIdFk");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("Student.Models.Enrollement", b =>
                {
                    b.Property<int?>("StudentIdFk")
                        .HasColumnType("int")
                        .HasColumnName("StudentID_FK");

                    b.Property<int?>("SubjectIdFk")
                        .HasColumnType("int")
                        .HasColumnName("SubjectID_FK");

                    b.HasIndex("StudentIdFk");

                    b.HasIndex("SubjectIdFk");

                    b.ToTable("Enrollement", (string)null);
                });

            modelBuilder.Entity("Student.Models.Invoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("InoviceAmount")
                        .HasColumnType("real");

                    b.Property<string>("InoviceTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("Student.Models.Libraries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentIdFk")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID_FK");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentIdFk");

                    b.ToTable("libraries", (string)null);
                });

            modelBuilder.Entity("Student.Models.Students", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentIdFk")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID_FK");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<int>("phoneNo")
                        .HasColumnType("int")
                        .HasColumnName("phoneNo");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentIdFk");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("Student.Models.Subjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentIdFk")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID_FK");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("TeacherIdFk")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID_FK");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("TeacherIdFk");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("Student.Models.Teachers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<double>("Balance")
                        .HasColumnType("float")
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("JoinedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<int>("phoneNo")
                        .HasColumnType("int")
                        .HasColumnName("phoneNo");

                    b.HasKey("Id");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("Student.Models.Departments", b =>
                {
                    b.HasOne("Student.Models.Subjects", "SubjectIdFkNavigation")
                        .WithMany("Departments")
                        .HasForeignKey("SubjectIdFk")
                        .HasConstraintName("FK_SubjectID_Dep");

                    b.Navigation("SubjectIdFkNavigation");
                });

            modelBuilder.Entity("Student.Models.Enrollement", b =>
                {
                    b.HasOne("Student.Models.Students", "StudentIdFkNavigation")
                        .WithMany()
                        .HasForeignKey("StudentIdFk")
                        .HasConstraintName("FK_StudentID_Sub");

                    b.HasOne("Student.Models.Subjects", "SubjectIdFkNavigation")
                        .WithMany()
                        .HasForeignKey("SubjectIdFk")
                        .HasConstraintName("FK_SubjectID_Std");

                    b.Navigation("StudentIdFkNavigation");

                    b.Navigation("SubjectIdFkNavigation");
                });

            modelBuilder.Entity("Student.Models.Libraries", b =>
                {
                    b.HasOne("Student.Models.Departments", "DepartmentIdFkNavigation")
                        .WithMany("Libraries")
                        .HasForeignKey("DepartmentIdFk")
                        .HasConstraintName("FK_ClassID_Lib");

                    b.Navigation("DepartmentIdFkNavigation");
                });

            modelBuilder.Entity("Student.Models.Students", b =>
                {
                    b.HasOne("Student.Models.Students", "DepartmentIdFkNavigation")
                        .WithMany("InverseDepartmentIdFkNavigation")
                        .HasForeignKey("DepartmentIdFk")
                        .HasConstraintName("FK_DepartmentID_Std");

                    b.Navigation("DepartmentIdFkNavigation");
                });

            modelBuilder.Entity("Student.Models.Subjects", b =>
                {
                    b.HasOne("Student.Models.Teachers", "TeacherIdFkNavigation")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherIdFk")
                        .HasConstraintName("FK_TeacherID_subjects");

                    b.Navigation("TeacherIdFkNavigation");
                });

            modelBuilder.Entity("Student.Models.Departments", b =>
                {
                    b.Navigation("Libraries");
                });

            modelBuilder.Entity("Student.Models.Students", b =>
                {
                    b.Navigation("InverseDepartmentIdFkNavigation");
                });

            modelBuilder.Entity("Student.Models.Subjects", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Student.Models.Teachers", b =>
                {
                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
